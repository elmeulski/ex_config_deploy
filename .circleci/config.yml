# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
            aws cloud-formation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  # Exercise: Config and Deployment
  configure_infrastructure:
    docker: 
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["3e:d7:af:bc:b2:df:01:64:d7:59:0b:90:fb:bd:c2:06"] 
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: ansible-playbook -i inventory.txt main-config-remote.yml

  # Exercise: Smoke test
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run: 
          name: smoke test
          command: |
            URL="https://blog.udacity.com"
            # Test if website exists"
            if curl -s --head ${URL}
            then 
              return 0
            else
              return 1
                fi

  # Exercise: Rollback
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudformation-template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1

  smoke_test_create_infra:
    docker:
      - image: alpine:latest
    steps:
      - run: 
          name: A job to fail # Job that intentionally fails to simulate error
          command: return 1
     # - destroy_environment

  # Exercise: Promote to production 
  create_and_deploy_front_end: 
    docker: 
      - image: amazon/aws-cli
    steps: 
      - checkout
      - run: 
          name: Executing cloudformation-bucket-template.yml - Create CloudFormation stack 
          command: |
            aws cloudformation deploy \
            --template-file cloudformation-bucket-template.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
  #    - run: aws s3 sync . s3//mybucket-${CIRCLE_WORKFLOW_ID_0:7} --delete

  get_last_deployment_id: 
    docker:
      - image: amazon/aws-cli
    steps: 
      - checkout
      - run: yum install -y tar gzip
      - run: 
          name: Fetch and save the old pipeline ID (bucket name) resposible for the last release. 
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt

  promote_to_production:
    docker: 
      - image: amazon/aws-cli
    steps: 
      - checkout
      - run: 
          name: Execute cloudformation-cloudfront-template.yml
          command: |
            aws cloudformation deploy  
            aws cloudformation deploy \
            --template-file cloudformation-cloudfront-template.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKSFLOW_ID:0:7}"
  
  clear_up_old_front_end:
    docker: 
      - image: amazon/aws-cli
    steps: 
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run: 
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          command: |
            export OldBucketId=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
          
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  configure-infrastructure-workflow:
    jobs:
    #  - configure_infrastructure
    #  - smoke_test
    #  - create_infrastructure
    #  - smoke_test_create_infra:
    #      requires: 
    #        - create_infrastructure
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clear_up_old_front_end: 
          requires: 
            - promote_to_production
            - get_last_deployment_id
          
# VS Code Extension Version: 1.5.1